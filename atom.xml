<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cq674350529&#39;s blog</title>
  
  
  <link href="https://cq674350529.github.io/atom.xml" rel="self"/>
  
  <link href="https://cq674350529.github.io/"/>
  <updated>2024-09-03T14:21:38.385Z</updated>
  <id>https://cq674350529.github.io/</id>
  
  <author>
    <name>cq674350529</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pwn2Own2020 Synology NAS Netatalk Heap Overflow Analysis</title>
    <link href="https://cq674350529.github.io/2024/09/03/Pwn2Own2020-Synology-NAS-Netatalk-Heap-Overflow-Analysis/Pwn2Own2020-Synology-NAS-Netatalk-Heap-Overflow-Analysis/"/>
    <id>https://cq674350529.github.io/2024/09/03/Pwn2Own2020-Synology-NAS-Netatalk-Heap-Overflow-Analysis/Pwn2Own2020-Synology-NAS-Netatalk-Heap-Overflow-Analysis/</id>
    <published>2024-09-03T14:00:00.000Z</published>
    <updated>2024-09-03T14:21:38.385Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;Pwn2Own Tokyo 2020&lt;/code&gt;比赛上，有&lt;code&gt;2&lt;/code&gt;个团队攻破了群晖&lt;code&gt;DS418Play&lt;/code&gt;型号的&lt;code&gt;NAS&lt;/code&gt;设备，其中&lt;code&gt;DEVCORE&lt;/code&gt;团队利用一个堆溢出漏洞在设备上实现了代码执行。根据&lt;code&gt;ZDI&lt;/code&gt;的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuemVyb2RheWluaXRpYXRpdmUuY29tL2Fkdmlzb3JpZXMvWkRJLTIxLTQ5Mi8=&quot;&gt;公告&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，漏洞存在于&lt;code&gt;Netatalk&lt;/code&gt;组件中，在解析&lt;code&gt;DSI&lt;/code&gt;结构体时由于缺乏对某个长度字段的适当校验，在后续进行拷贝时会出现堆溢出。目前群晖已发布了补丁，该漏洞的触发相对比较简单，参考&lt;code&gt;@Angelboy&lt;/code&gt;的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oaXRjb24ub3JnLzIwMjEvYWdlbmRhLzAzZjA2Njc1LTI2MWQtNGM5Ny1iNTI0LTMzZWY5Y2M2Y2NiMi8lRTQlQkQlQTAlRTclOUElODQlMjBOQVMlMjAlRTQlQjglOEQlRTYlOTglQUYlRTQlQkQlQTAlRTclOUElODQlMjBOQVMlMjAhLnBkZg==&quot;&gt;分享&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，在本地环境中完成了对漏洞的利用。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/IoT/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="Synology" scheme="https://cq674350529.github.io/tags/Synology/"/>
    
  </entry>
  
  <entry>
    <title>Analyzing the MiniDLNA Http Chunk Parsing Vulnerability (CVE-2023-33476)</title>
    <link href="https://cq674350529.github.io/2024/04/02/Analyzing-the-MiniDLNA-Http-Chunk-Parsing-Vulnerability-CVE-2023-33476/"/>
    <id>https://cq674350529.github.io/2024/04/02/Analyzing-the-MiniDLNA-Http-Chunk-Parsing-Vulnerability-CVE-2023-33476/</id>
    <published>2024-04-02T14:00:00.000Z</published>
    <updated>2024-04-02T15:14:03.019Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;CVE-2023-33476&lt;/code&gt;是存在于&lt;code&gt;ReadyMedia (MiniDLNA)&lt;/code&gt; &lt;code&gt;1.1.15 ~ 1.3.2&lt;/code&gt;版本中的一个越界读/写漏洞，该漏洞是由于在处理采用分块传输编码的HTTP请求时存在逻辑缺陷，通过伪造较大的分块长度，可造成后续进行拷贝时出现越界读/写问题。利用该漏洞，远程未授权的用户可实现任意代码执行。该漏洞是由安全研究员&lt;code&gt;@hyprdude&lt;/code&gt;发现，目前已在&lt;code&gt;MiniDLNA 1.3.3&lt;/code&gt;版本中修复了。同时，&lt;code&gt;@hyprdude&lt;/code&gt;还提供了详细的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9ibG9nLmNvZmZpbnNlYy5jb20vMGRheS8yMDIzLzA1LzMxL21pbmlkbG5hLWhlYXAtb3ZlcmZsb3ctcmNhLmh0bWw=&quot;&gt;漏洞分析&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;和&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9ibG9nLmNvZmZpbnNlYy5jb20vMGRheS8yMDIzLzA2LzE5L21pbmlkbG5hLWN2ZS0yMDIzLTMzNDc2LWV4cGxvaXRzLmh0bWw=&quot;&gt;利用思路&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;文章，感兴趣的可以看看。参考上面两篇文章，下文将对漏洞进行分析，并重点关注漏洞的利用思路。&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="MiniDLNA" scheme="https://cq674350529.github.io/tags/MiniDLNA/"/>
    
  </entry>
  
  <entry>
    <title>Analyzing the Vulnerability in ASUS Router (maybe) from TFC2021</title>
    <link href="https://cq674350529.github.io/2023/08/05/Analyzing-the-Vulnerability-in-ASUS-Router-maybe-from-TFC2021/"/>
    <id>https://cq674350529.github.io/2023/08/05/Analyzing-the-Vulnerability-in-ASUS-Router-maybe-from-TFC2021/</id>
    <published>2023-08-05T04:00:00.000Z</published>
    <updated>2023-08-05T05:30:26.970Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;2021&lt;/code&gt;年天府杯破解大赛的设备类项目包含群晖和华硕两个项目，其中，群晖设备(&lt;code&gt;DS220j&lt;/code&gt;)暂时无选手攻破，而华硕设备(&lt;code&gt;RT-AX56U V2/热血版&lt;/code&gt;)则被两队选手成功拿下。笔者在前期主要关注群晖设备，也顺带看了下华硕设备，虽然发现了其他的小问题，但是未发现这个整数溢出漏洞 。目前华硕官方已发布对应的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuYXN1cy5jb20uY24vTmV0d29ya2luZy1Jb1QtU2VydmVycy9XaUZpLVJvdXRlcnMvQWxsLXNlcmllcy9SVC1BWDU2VS1WMi9IZWxwRGVza19CSU9TLw==&quot;&gt;补丁&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，网上也有其他师傅对这个漏洞进行了详细的分析，感兴趣地可以看看 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzE3NTEv&quot;&gt;“天府杯华硕会战的围剿与反围剿”&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; 和 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93enQuYWMuY24vMjAyMS8xMS8wMi9URkMyMDIxLUFYNTZVLw==&quot;&gt;“Tianfu Cup 2021 RT-AX56U RCE”&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;。参考上面两篇文章，下文将对漏洞进行分析，并重点关注漏洞的利用思路。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="ASUS" scheme="https://cq674350529.github.io/tags/ASUS/"/>
    
  </entry>
  
  <entry>
    <title>Analyzing an Old Netatalk dsi_writeinit Buffer Overflow Vulnerability in NETGEAR Router</title>
    <link href="https://cq674350529.github.io/2023/02/10/Analyzing-an-Old-Netatalk-dsi-writeinit-Buffer-Overflow-Vulnerability-in-NETGEAR-Router/"/>
    <id>https://cq674350529.github.io/2023/02/10/Analyzing-an-Old-Netatalk-dsi-writeinit-Buffer-Overflow-Vulnerability-in-NETGEAR-Router/</id>
    <published>2023-02-10T14:00:00.000Z</published>
    <updated>2023-02-10T14:29:23.505Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;2022年11月，&lt;code&gt;SSD&lt;/code&gt;发布了一个与&lt;code&gt;NETGEAR R7800&lt;/code&gt;型号设备相关的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zc2QtZGlzY2xvc3VyZS5jb20vc3NkLWFkdmlzb3J5LW5ldGdlYXItcjc4MDAtYWZwZC1wcmVhdXRoLw==&quot;&gt;漏洞公告&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;。根据该公告，该漏洞存在于&lt;code&gt;Netatalk&lt;/code&gt;组件(对应的服务程序为&lt;code&gt;afpd&lt;/code&gt;)中，由于在处理接收的&lt;code&gt;DSI&lt;/code&gt;数据包时，缺乏对数据包中某些字段的适当校验，在&lt;code&gt;dsi_writeinit()&lt;/code&gt;中调用&lt;code&gt;memcpy()&lt;/code&gt;时存在缓冲区溢出问题。利用该漏洞，攻击者可以在目标设备上实现任意代码执行，且无需认证。该漏洞公告中包含了漏洞的细节以及利用思路，但给出的&lt;code&gt;poc&lt;/code&gt;脚本仅实现了控制流的劫持，缺少后续代码执行的部分。下面将基于&lt;code&gt;R8500&lt;/code&gt;型号设备，对漏洞进行简单分析，并给出具体的利用方式。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="Netgear" scheme="https://cq674350529.github.io/tags/Netgear/"/>
    
  </entry>
  
  <entry>
    <title>Patch diff an old vulnerability in Synology NAS</title>
    <link href="https://cq674350529.github.io/2023/01/06/Patch-diff-an-old-vulnerability-in-Synology-NAS/"/>
    <id>https://cq674350529.github.io/2023/01/06/Patch-diff-an-old-vulnerability-in-Synology-NAS/</id>
    <published>2023-01-06T14:00:00.000Z</published>
    <updated>2023-01-06T14:13:21.712Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前在浏览群晖官方的安全公告时，翻到一个&lt;code&gt;Critical&lt;/code&gt;级别的历史漏洞&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuc3lub2xvZ3kuY29tL2VuLWdsb2JhbC9zZWN1cml0eS9hZHZpc29yeS9TeW5vbG9neV9TQV8xOF82NA==&quot;&gt;Synology-SA-18:64&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;。根据漏洞公告，该漏洞存在于群晖的&lt;code&gt;DSM(DiskStation Manager)&lt;/code&gt;中，允许远程的攻击者在受影响的设备上实现任意代码执行。对群晖&lt;code&gt;NAS&lt;/code&gt;设备有所了解的读者可能知道，默认条件下能用来在群晖&lt;code&gt;NAS&lt;/code&gt;上实现远程代码执行的漏洞很少，有公开信息的可能就是与&lt;code&gt;Pwn2Own&lt;/code&gt;比赛相关的几个。由于该漏洞公告中没有更多的信息，于是打算通过补丁比对的方式来定位和分析该公告中提及的漏洞。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="Synology" scheme="https://cq674350529.github.io/tags/Synology/"/>
    
  </entry>
  
  <entry>
    <title>A Journey into Synology NAS 系列四: HTTP请求流程和案例分析</title>
    <link href="https://cq674350529.github.io/2022/01/22/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E5%9B%9B-HTTP%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E5%92%8C%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <id>https://cq674350529.github.io/2022/01/22/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E5%9B%9B-HTTP%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E5%92%8C%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</id>
    <published>2022-01-22T04:00:00.000Z</published>
    <updated>2022-11-24T01:52:55.071Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前面两篇文章从局域网的角度出发，对群晖&lt;code&gt;NAS&lt;/code&gt;设备上开放的部分服务进行了分析。而在大部分情况下，群晖&lt;code&gt;NAS&lt;/code&gt;设备是用于远程访问的场景中，即唯一的入口是通过&lt;code&gt;5000/http(5001/https)&lt;/code&gt;进行访问(暂不考虑使用&lt;code&gt;QuickConnect&lt;/code&gt;或其他代理的情形)。因此，本篇文章将主要对&lt;code&gt;HTTP&lt;/code&gt;请求流程和处理机制进行分析，并分享在部分套件中发现的几个安全问题。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    
    <category term="Synology" scheme="https://cq674350529.github.io/tags/Synology/"/>
    
  </entry>
  
  <entry>
    <title>A Journey into Synology NAS 系列三: iscsi_snapshot_comm_core服务分析</title>
    <link href="https://cq674350529.github.io/2021/12/25/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E4%B8%89-iscsi_snapshot_comm_core%E6%9C%8D%E5%8A%A1%E5%88%86%E6%9E%90/"/>
    <id>https://cq674350529.github.io/2021/12/25/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E4%B8%89-iscsi_snapshot_comm_core%E6%9C%8D%E5%8A%A1%E5%88%86%E6%9E%90/</id>
    <published>2021-12-25T01:00:00.000Z</published>
    <updated>2022-11-24T01:52:46.539Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上一篇&lt;a href=&quot;https://cq674350529.github.io/2021/09/12/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E4%BA%8C-findhostd%E6%9C%8D%E5%8A%A1%E5%88%86%E6%9E%90/&quot;&gt;文章&lt;/a&gt;主要对群晖&lt;code&gt;NAS&lt;/code&gt;设备上的&lt;code&gt;findhostd&lt;/code&gt;服务进行了分析。本篇文章将继续对另一个服务&lt;code&gt;iscsi_snapshot_comm_core&lt;/code&gt;进行分析，介绍其对应的通信流程，并分享在其中发现的几个安全问题。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    
    <category term="Synology" scheme="https://cq674350529.github.io/tags/Synology/"/>
    
  </entry>
  
  <entry>
    <title>A Journey into Synology NAS 系列二: findhostd服务分析</title>
    <link href="https://cq674350529.github.io/2021/09/12/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E4%BA%8C-findhostd%E6%9C%8D%E5%8A%A1%E5%88%86%E6%9E%90/"/>
    <id>https://cq674350529.github.io/2021/09/12/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E4%BA%8C-findhostd%E6%9C%8D%E5%8A%A1%E5%88%86%E6%9E%90/</id>
    <published>2021-09-12T04:00:00.000Z</published>
    <updated>2022-11-24T01:52:37.686Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上一篇&lt;a href=&quot;https://cq674350529.github.io/2021/08/30/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E4%B8%80-%E7%BE%A4%E6%99%96NAS%E4%BB%8B%E7%BB%8D/&quot;&gt;文章&lt;/a&gt;主要对群晖&lt;code&gt;NAS&lt;/code&gt;进行了简单介绍，并给出了搭建群晖&lt;code&gt;NAS&lt;/code&gt;环境的方法。在前面的基础上，本篇文章将从局域网的视角出发，对群晖&lt;code&gt;NAS&lt;/code&gt;设备上开放的部分服务进行分析。由于篇幅原因，下面将重点对&lt;code&gt;findhostd&lt;/code&gt;服务进行分析，介绍对应的通信机制和协议格式，并分享在其中发现的部分安全问题。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    
    <category term="Synology" scheme="https://cq674350529.github.io/tags/Synology/"/>
    
  </entry>
  
  <entry>
    <title>A Journey into Synology NAS 系列一: 群晖NAS介绍</title>
    <link href="https://cq674350529.github.io/2021/08/30/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E4%B8%80-%E7%BE%A4%E6%99%96NAS%E4%BB%8B%E7%BB%8D/"/>
    <id>https://cq674350529.github.io/2021/08/30/A-Journey-into-Synology-NAS-%E7%B3%BB%E5%88%97%E4%B8%80-%E7%BE%A4%E6%99%96NAS%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-08-30T14:00:00.000Z</published>
    <updated>2023-02-05T07:00:48.094Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前花过一段时间研究群晖的&lt;code&gt;NAS&lt;/code&gt;设备，并发现了一些安全问题，同时该研究内容入选了安全会议&lt;code&gt;POC2019&lt;/code&gt;和&lt;code&gt;HITB2021AMS&lt;/code&gt;。网上关于群晖&lt;code&gt;NAS&lt;/code&gt;设备安全研究的公开资料并不多，因此基于议题&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cucG93ZXJvZmNvbW11bml0eS5uZXQvcG9jMjAxOS9RaWFuLnBkZg==&quot;&gt;《Bug Hunting in Synology NAS》&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;和&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9jb25mZXJlbmNlLmhpdGIub3JnL2ZpbGVzL2hpdGJzZWNjb25mMjAyMWFtcy9tYXRlcmlhbHMvRDFUMiUyMC0lMjBBJTIwSm91cm5leSUyMGludG8lMjBTeW5vbG9neSUyME5BUyUyMC0lMjBRQy5wZGY=&quot;&gt;《A Journey into Synology NAS》&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，将之前的一些内容展开，如果有对群晖&lt;code&gt;NAS&lt;/code&gt;设备感兴趣的同学，希望对你们有所帮助。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    
    <category term="Synology" scheme="https://cq674350529.github.io/tags/Synology/"/>
    
  </entry>
  
  <entry>
    <title>Netgear R6400v2 堆溢出漏洞分析与利用</title>
    <link href="https://cq674350529.github.io/2021/03/19/Netgear-R6400v2-%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <id>https://cq674350529.github.io/2021/03/19/Netgear-R6400v2-%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</id>
    <published>2021-03-19T14:00:00.000Z</published>
    <updated>2023-02-10T14:28:22.615Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;漏洞简介&quot;&gt;&lt;a href=&quot;#漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;漏洞简介&quot;&gt;&lt;/a&gt;漏洞简介&lt;/h3&gt;&lt;p&gt;2020年6月，&lt;code&gt;ZDI&lt;/code&gt;发布了一个关于&lt;code&gt;Netgear R6700&lt;/code&gt;型号设备上堆溢出漏洞的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuemVyb2RheWluaXRpYXRpdmUuY29tL2Fkdmlzb3JpZXMvWkRJLTIwLTcwOS8=&quot;&gt;安全公告&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，随后又发布了一篇关于该漏洞的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuemVyb2RheWluaXRpYXRpdmUuY29tL2Jsb2cvMjAyMC82LzI0L3pkaS0yMC03MDktaGVhcC1vdmVyZmxvdy1pbi10aGUtbmV0Z2Vhci1uaWdodGhhd2stcjY3MDAtcm91dGVy&quot;&gt;博客&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，其中对该漏洞进行了详细分析，并给出了完整的漏洞利用代码。该漏洞存在于对应设备的&lt;code&gt;httpd&lt;/code&gt;组件中，在处理配置文件上传请求时，由于对请求内容的处理不当，在后续申请内存空间时存在整数溢出问题，从而造成堆溢出问题。攻击者利用这一漏洞可以在目标设备上实现代码执行，且无需认证。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="Netgear" scheme="https://cq674350529.github.io/tags/Netgear/"/>
    
  </entry>
  
  <entry>
    <title>Zyxel设备eCos固件加载地址分析</title>
    <link href="https://cq674350529.github.io/2021/03/04/Zyxel%E8%AE%BE%E5%A4%87eCos%E5%9B%BA%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%88%86%E6%9E%90/"/>
    <id>https://cq674350529.github.io/2021/03/04/Zyxel%E8%AE%BE%E5%A4%87eCos%E5%9B%BA%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%88%86%E6%9E%90/</id>
    <published>2021-03-04T12:00:00.000Z</published>
    <updated>2022-11-24T01:55:44.568Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;English version is &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9lY29zLnd0Zi8yMDIxLzAzLzMwL2Vjb3MtbG9hZC1hZGRyZXNz&quot;&gt;here&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;, thanks for &lt;code&gt;ecos.wtf&lt;/code&gt; team’s translation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在分析&lt;code&gt;Zyxel&lt;/code&gt; 某型号设备时，发现该设备的固件无法采用&lt;code&gt;binwalk&lt;/code&gt;等工具进行提取。根据&lt;code&gt;binwalk&lt;/code&gt;的提示信息，猜测该设备使用的是&lt;code&gt;eCos&lt;/code&gt;实时操作系统，其固件是一个单一大文件。由于不知道其加载地址，在使用&lt;code&gt;IDA&lt;/code&gt;等工具进行分析时，无法建立正确的交叉引用，直接逆向会比较麻烦。而网上与&lt;code&gt;eCos&lt;/code&gt;固件分析相关的资料不多，在没有相关的芯片文档或&lt;code&gt;SDK&lt;/code&gt;手册等资料的前提下，从该固件本身出发，通过对固件进行简单分析，寻找固件中引用的固定地址，最终确定了该固件的加载地址。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    
    <category term="固件" scheme="https://cq674350529.github.io/tags/%E5%9B%BA%E4%BB%B6/"/>
    
    <category term="eCos" scheme="https://cq674350529.github.io/tags/eCos/"/>
    
  </entry>
  
  <entry>
    <title>NETGEAR PSV-2019-0076: 从漏洞公告到PoC</title>
    <link href="https://cq674350529.github.io/2020/10/01/NETGEAR-PSV-2019-0076-%E4%BB%8E%E6%BC%8F%E6%B4%9E%E5%85%AC%E5%91%8A%E5%88%B0PoC/"/>
    <id>https://cq674350529.github.io/2020/10/01/NETGEAR-PSV-2019-0076-%E4%BB%8E%E6%BC%8F%E6%B4%9E%E5%85%AC%E5%91%8A%E5%88%B0PoC/</id>
    <published>2020-10-01T02:00:00.000Z</published>
    <updated>2023-02-10T14:29:08.472Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近看到一篇&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWN1cml0eWFmZmFpcnMuY28vd29yZHByZXNzLzk5MTc3L3NlY3VyaXR5L25ldGdlYXItZmxhZ3NoaXAtbmlnaHRoYXdrLXJvdXRlci1yY2UuaHRtbA==&quot;&gt;安全资讯&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，提到&lt;code&gt;Netgear&lt;/code&gt;修复了其产品中的多个高危漏洞，包括&lt;code&gt;PSV-2019-0076&lt;/code&gt;、&lt;code&gt;PSV-2018-0352&lt;/code&gt;和&lt;code&gt; PSV-2019-0051&lt;/code&gt;等。其中，利用部分漏洞可实现远程代码执行，且无需认证。以&lt;code&gt;PSV-2019-0076&lt;/code&gt;为例，查看&lt;code&gt;Netgear&lt;/code&gt;的安全公告，如下，并没有透露过多的细节。&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="Netgear" scheme="https://cq674350529.github.io/tags/Netgear/"/>
    
    <category term="补丁分析" scheme="https://cq674350529.github.io/tags/%E8%A1%A5%E4%B8%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>PSV-2020-0211:Netgear R8300 UPnP栈溢出漏洞分析</title>
    <link href="https://cq674350529.github.io/2020/09/16/PSV-2020-0211-Netgear-R8300-UPnP%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://cq674350529.github.io/2020/09/16/PSV-2020-0211-Netgear-R8300-UPnP%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-09-16T14:00:00.000Z</published>
    <updated>2023-02-10T14:28:57.118Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;漏洞简介&quot;&gt;&lt;a href=&quot;#漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;漏洞简介&quot;&gt;&lt;/a&gt;漏洞简介&lt;/h3&gt;&lt;p&gt;&lt;code&gt;PSV-2020-0211&lt;/code&gt;对应&lt;code&gt;Netgear&lt;/code&gt; &lt;code&gt;R8300&lt;/code&gt;型号路由器上的一个缓冲区溢出漏洞，&lt;code&gt;Netgear&lt;/code&gt;官方在2020年7月31日发布了&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9rYi5uZXRnZWFyLmNvbS8wMDAwNjIxNTgvU2VjdXJpdHktQWR2aXNvcnktZm9yLVByZS1BdXRoZW50aWNhdGlvbi1Db21tYW5kLUluamVjdGlvbi1vbi1SODMwMC1QU1YtMjAyMC0wMjEx&quot;&gt;安全公告&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，8月18日&lt;code&gt;SSD&lt;/code&gt;公开了该漏洞的相关&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zc2QtZGlzY2xvc3VyZS5jb20vc3NkLWFkdmlzb3J5LW5ldGdlYXItbmlnaHRoYXdrLXI4MzAwLXVwbnBkLXByZWF1dGgtcmNlLw==&quot;&gt;细节&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;。该漏洞存在于设备的&lt;code&gt;UPnP&lt;/code&gt;服务中，由于在处理数据包时缺乏适当的长度校验，通过发送一个特殊的数据包可造成缓冲区溢出。利用该漏洞，未经认证的用户可实现任意代码执行，从而获取设备的控制权。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="Netgear" scheme="https://cq674350529.github.io/tags/Netgear/"/>
    
  </entry>
  
  <entry>
    <title>Create Wireshark Dissector in Lua</title>
    <link href="https://cq674350529.github.io/2020/09/03/Create-Wireshark-Dissector-in-Lua/"/>
    <id>https://cq674350529.github.io/2020/09/03/Create-Wireshark-Dissector-in-Lua/</id>
    <published>2020-09-03T12:38:24.000Z</published>
    <updated>2022-11-24T01:54:41.296Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在对嵌入式设备进行分析时，有时会遇到一些私有协议，由于缺少对应的解析插件，这些协议无法被&lt;code&gt;Wireshark&lt;/code&gt;解析，从而以原始数据的形式呈现，不便于对协议的理解与分析。正好之前看到了介绍用&lt;code&gt;Lua&lt;/code&gt;脚本编写&lt;code&gt;Wireshark&lt;/code&gt;协议解析插件的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9taWthLXMuZ2l0aHViLmlvL3dpcmVzaGFyay9sdWEvZGlzc2VjdG9yLzIwMTcvMTEvMDQvY3JlYXRpbmctYS13aXJlc2hhcmstZGlzc2VjdG9yLWluLWx1YS0xLmh0bWw=&quot;&gt;文章&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，于是以群晖&lt;code&gt;NAS&lt;/code&gt;设备中的某个私有协议为例，动手写了一个协议解析插件。&lt;/p&gt;</summary>
    
    
    
    <category term="基础" scheme="https://cq674350529.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="协议" scheme="https://cq674350529.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Pwn2Own Netgear R6700 UPnP漏洞分析</title>
    <link href="https://cq674350529.github.io/2020/07/04/Pwn2Own-Netgear-R6700-UPnP%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://cq674350529.github.io/2020/07/04/Pwn2Own-Netgear-R6700-UPnP%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-07-04T02:00:00.000Z</published>
    <updated>2023-02-10T14:28:40.914Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;6月15日，&lt;code&gt;ZDI&lt;/code&gt;发布了有关&lt;code&gt;NETGEAR&lt;/code&gt; &lt;code&gt;R6700&lt;/code&gt;型号路由器的10个&lt;code&gt;0 day&lt;/code&gt;的安全公告，其中有2个关于&lt;code&gt;UPnP&lt;/code&gt;的漏洞：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuemVyb2RheWluaXRpYXRpdmUuY29tL2Fkdmlzb3JpZXMvWkRJLTIwLTcwMy8=&quot;&gt;认证绕过&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;和&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuemVyb2RheWluaXRpYXRpdmUuY29tL2Fkdmlzb3JpZXMvWkRJLTIwLTcwNC8=&quot;&gt;缓冲区溢出&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;。通过组合这2个漏洞，在&lt;code&gt;Pwn2Own Tokyo 2019&lt;/code&gt;比赛中，来自&lt;code&gt;Team Flashback&lt;/code&gt;的安全研究员&lt;code&gt;Pedro Ribeiro&lt;/code&gt;和&lt;code&gt;Radek Domanski&lt;/code&gt;成功在&lt;code&gt;R6700v3&lt;/code&gt;设备上实现代码执行。&lt;/p&gt;
&lt;p&gt;6月17日，&lt;code&gt;NETGEAR&lt;/code&gt;官方发布了&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9rYi5uZXRnZWFyLmNvbS8wMDAwNjE5ODIvU2VjdXJpdHktQWR2aXNvcnktZm9yLU11bHRpcGxlLVZ1bG5lcmFiaWxpdGllcy1vbi1Tb21lLVJvdXRlcnMtTW9iaWxlLVJvdXRlcnMtTW9kZW1zLUdhdGV3YXlzLWFuZC1FeHRlbmRlcnM=&quot;&gt;安全公告&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，并针对&lt;code&gt;R6400v2&lt;/code&gt;和&lt;code&gt;R6700v3&lt;/code&gt;这2个型号的设备发布了补丁。由于此时还没有这2个漏洞的具体细节，于是打算通过补丁比对的方式对漏洞进行定位和分析。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="Netgear" scheme="https://cq674350529.github.io/tags/Netgear/"/>
    
  </entry>
  
  <entry>
    <title>MikroTik SMB测试之Mutiny Fuzzer</title>
    <link href="https://cq674350529.github.io/2020/07/01/MikroTik-SMB%E6%B5%8B%E8%AF%95%E4%B9%8BMutiny-Fuzzer/"/>
    <id>https://cq674350529.github.io/2020/07/01/MikroTik-SMB%E6%B5%8B%E8%AF%95%E4%B9%8BMutiny-Fuzzer/</id>
    <published>2020-07-01T13:00:00.000Z</published>
    <updated>2023-02-10T14:24:25.867Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Mutiny&lt;/code&gt;是由思科研究人员开发的一款基于变异的网络&lt;code&gt;fuzz&lt;/code&gt;框架，其主要原理是通过从数据包(如&lt;code&gt;pcap&lt;/code&gt;文件)中解析协议请求并生成一个&lt;code&gt;.fuzzer&lt;/code&gt;文件，然后基于该文件对请求进行变异，再发送给待测试的目标。通过这种方式，可以在很短的时间内开始对目标进行&lt;code&gt;fuzz&lt;/code&gt;，而不用关心相关网络协议的具体细节。&lt;/p&gt;</summary>
    
    
    
    <category term="fuzz" scheme="https://cq674350529.github.io/categories/fuzz/"/>
    
    
    <category term="MikroTik" scheme="https://cq674350529.github.io/tags/MikroTik/"/>
    
  </entry>
  
  <entry>
    <title>CDPwn系列之CVE-2020-3119分析</title>
    <link href="https://cq674350529.github.io/2020/06/25/CDPwn%E7%B3%BB%E5%88%97%E4%B9%8BCVE-2020-3119%E5%88%86%E6%9E%90/"/>
    <id>https://cq674350529.github.io/2020/06/25/CDPwn%E7%B3%BB%E5%88%97%E4%B9%8BCVE-2020-3119%E5%88%86%E6%9E%90/</id>
    <published>2020-06-25T14:00:00.000Z</published>
    <updated>2023-02-10T14:27:29.553Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;漏洞简介&quot;&gt;&lt;a href=&quot;#漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;漏洞简介&quot;&gt;&lt;/a&gt;漏洞简介&lt;/h3&gt;&lt;p&gt;&lt;code&gt;CDPwn&lt;/code&gt;系列漏洞是由来自&lt;code&gt;Armis&lt;/code&gt;的安全研究员在思科&lt;code&gt;CDP(Cisco Discovery Protocol)&lt;/code&gt;协议中发现的5个&lt;code&gt;0 day&lt;/code&gt;漏洞，影响的产品包括思科交换机、路由器、&lt;code&gt;IP&lt;/code&gt;电话以及摄像机等。其中，&lt;code&gt;CVE-2020-3119&lt;/code&gt;是&lt;code&gt;NX-OS&lt;/code&gt;系统中存在的一个栈溢出漏洞，利用该漏洞可在受影响的设备(如&lt;code&gt;Nexus&lt;/code&gt;系列交换机)上实现任意代码执行，如修改&lt;code&gt;Nexus&lt;/code&gt;交换机的配置以穿越&lt;code&gt;VLAN&lt;/code&gt;等。&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="Cisco" scheme="https://cq674350529.github.io/tags/Cisco/"/>
    
  </entry>
  
  <entry>
    <title>【置顶】技巧misc</title>
    <link href="https://cq674350529.github.io/2020/05/09/%E6%8A%80%E5%B7%A7misc/"/>
    <id>https://cq674350529.github.io/2020/05/09/%E6%8A%80%E5%B7%A7misc/</id>
    <published>2020-05-09T15:00:00.000Z</published>
    <updated>2024-03-24T08:39:13.353Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;qemu仿真出现Illegal-instruction错误&quot;&gt;&lt;a href=&quot;#qemu仿真出现Illegal-instruction错误&quot; class=&quot;headerlink&quot; title=&quot;qemu仿真出现Illegal instruction错误&quot;&gt;&lt;/a&gt;&lt;code&gt;qemu&lt;/code&gt;仿真出现Illegal instruction错误&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;qemu user mode&lt;/code&gt;运行单个程序时，可能会遇到Illegal instruction错误。尝试使用更新版本的&lt;code&gt;qemu-mipsel-static&lt;/code&gt;，也还是存在类似的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ file ./bin/busybox &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./bin/busybox: ELF 32-bit LSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, no section header&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ qemu-mipsel-static -L . ./bin/busybox &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;qemu: uncaught target signal 4 (Illegal instruction) - core dumped&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Illegal instruction (core dumped)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="基础" scheme="https://cq674350529.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="技巧" scheme="https://cq674350529.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Mikrotik Chimay-Red 分析</title>
    <link href="https://cq674350529.github.io/2020/03/03/Mikrotik-Chimay-Red-%E5%88%86%E6%9E%90/"/>
    <id>https://cq674350529.github.io/2020/03/03/Mikrotik-Chimay-Red-%E5%88%86%E6%9E%90/</id>
    <published>2020-03-03T12:00:00.000Z</published>
    <updated>2023-02-10T14:23:34.606Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Chimay-Red&lt;/code&gt;是针对&lt;code&gt;MikroTik RouterOs&lt;/code&gt;中&lt;code&gt;www&lt;/code&gt;程序存在的一个漏洞的利用工具，该工具在泄露的&lt;code&gt;Vault 7&lt;/code&gt;文件中提及。利用该工具，在无需认证的前提下可在受影响的设备上实现远程代码执行，从而获取设备的控制权。该漏洞本质上是一个整数溢出漏洞，对漏洞的利用则通过堆叠远程多线程栈空间的思路完成。更多信息可参考博客&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9ibG9nLnNlZWtpbnRvby5jb20vY2hpbWF5LXJlZC8=&quot;&gt;Chimay-Red&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;下面结合已有的漏洞利用脚本&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL0JpZ05lcmQ5NS9DaGltYXktUmVk&quot;&gt;Chimay-Red&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，对该漏洞的形成原因及利用思路进行分析。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://cq674350529.github.io/categories/IoT/"/>
    
    <category term="漏洞" scheme="https://cq674350529.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="MikroTik" scheme="https://cq674350529.github.io/tags/MikroTik/"/>
    
  </entry>
  
  <entry>
    <title>C与汇编语言混合使用</title>
    <link href="https://cq674350529.github.io/2020/01/13/C%E4%B8%8E%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8/"/>
    <id>https://cq674350529.github.io/2020/01/13/C%E4%B8%8E%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8/</id>
    <published>2020-01-13T13:41:10.000Z</published>
    <updated>2022-11-24T01:55:14.093Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在某些情况下，我们可能会将C代码与汇编代码一起混合使用。比如，使用汇编代码直接与硬件进行交互，或者在处理任务时希望占用尽量少的资源同时获得最大的性能，而使用C代码处理一些更高级 的任务。通常情况下，混合使用C与汇编可分为以下三种情形：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在C中调用汇编中定义的函数&lt;/li&gt;
&lt;li&gt;在汇编中调用C语言中的函数&lt;/li&gt;
&lt;li&gt;直接在C语言中嵌入汇编&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="基础" scheme="https://cq674350529.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="系统调用" scheme="https://cq674350529.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
</feed>
